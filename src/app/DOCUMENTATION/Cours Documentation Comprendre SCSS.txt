

**Documentation SCSS pour  Intermédiaires (par Jack-Josias_ULTIMATE_v7.2.0)**

Ce guide est conçu pour vous donner une compréhension solide de SCSS (Sassy CSS), un préprocesseur CSS qui ajoute des fonctionnalités puissantes au CSS standard.

**Partie 1 : Les Fondations de SCSS**

1.  **Qu'est-ce que SCSS et Pourquoi l'Utiliser ?**
    *   **CSS Standard :** Langage de feuille de style utilisé pour décrire la présentation de documents HTML. Peut devenir répétitif et difficile à maintenir sur de gros projets.
    *   **Préprocesseur CSS :** Un outil qui vous permet d'écrire du CSS avec une syntaxe plus avancée (comme SCSS ou Sass), puis le compile en CSS standard que les navigateurs comprennent.
    *   **SCSS (Sassy CSS) :** Une des deux syntaxes de Sass (l'autre étant la syntaxe "indentée" plus ancienne, simplement appelée "Sass"). SCSS est un sur-ensemble de CSS, ce qui signifie que **tout code CSS valide est également du code SCSS valide**. C'est la syntaxe la plus populaire car elle ressemble beaucoup au CSS que vous connaissez déjà, mais avec des super-pouvoirs.
    *   **Avantages de SCSS :**
        *   **Code plus Organisé :** Grâce aux variables, mixins, imbrications, etc.
        *   **Code plus Maintenable :** Moins de répétition (principe DRY - Don't Repeat Yourself).
        *   **Code plus Lisible :** La structure peut mieux refléter la structure HTML.
        *   **Fonctionnalités Avancées :** Logique, boucles, fonctions, opérations mathématiques.

2.  **Installation et Compilation**
    *   Dans un projet Next.js (comme le vôtre), l'installation de `sass` (`npm install sass` ou `yarn add sass`) suffit généralement. Next.js s'occupe de la compilation en arrière-plan.
    *   Les fichiers SCSS ont l'extension `.scss`.
    *   Lors du build (ou en développement avec le serveur Next.js), ces fichiers `.scss` sont transformés en fichiers `.css`.

3.  **Variables SCSS (`$`): Votre Première Super-Puissance**
    *   **Définition :** Permettent de stocker des valeurs réutilisables (couleurs, polices, tailles, etc.).
    *   **Syntaxe :** `$<nom-variable>: <valeur>;`
    *   **Utilisation :** `propriete: $<nom-variable>;`
    *   **Exemple (tiré de votre `_variables-core.scss`) :**
        ```scss
        // Définition
        $color-bg-dark: #1A1A1D;
        $font-size-base: 1.6rem;

        // Utilisation
        body {
          background-color: $color-bg-dark;
          font-size: $font-size-base;
        }
        ```
    *   **Portée (Scope) :** Les variables ont une portée. Définies en dehors de toute règle, elles sont globales. Définies à l'intérieur d'une règle, elles sont locales à cette règle et à ses enfants (sauf si `!global` est utilisé, mais c'est à utiliser avec parcimonie).
    *   **Types de Données :** Nombres (avec ou sans unités), chaînes de caractères (avec ou sans guillemets), couleurs (hex, rgb, hsl, noms), booléens (`true`, `false`), `null`, listes (séparées par des espaces ou des virgules), et maps (paires clé-valeur).

4.  **Imbrication (Nesting) : Refléter la Structure HTML**
    *   **Principe :** Permet d'imbriquer des sélecteurs CSS les uns dans les autres, de la même manière que les éléments HTML sont imbriqués. Cela rend le code plus lisible et évite de répéter les sélecteurs parents.
    *   **Exemple :**
        ```scss
        // Dans votre _task-item.scss
        .task-item { // Sélecteur parent
          display: flex;
          background-color: $color-bg-light;

          &__text { // Imbrication avec le sélecteur de référence parent '&'
            flex-grow: 1;
            color: $color-text-primary;

            &::after { // Imbrication d'un pseudo-élément
              content: '';
              position: absolute;
            }
          }

          &--completed { // Imbrication d'un modificateur (BEM-like)
            opacity: 0.6;

            .task-item__text { // On peut aussi ré-imbriquer un enfant spécifique
              color: $color-text-disabled;
            }
          }

          &__delete-button {
            background-color: transparent;
          }
        }

        // Ce qui compile en CSS standard :
        // .task-item {
        //   display: flex;
        //   background-color: #3A3A40; /* exemple de valeur compilée */
        // }
        // .task-item__text {
        //   flex-grow: 1;
        //   color: #F5F5F7;
        // }
        // .task-item__text::after {
        //   content: '';
        //   position: absolute;
        // }
        // .task-item--completed {
        //   opacity: 0.6;
        // }
        // .task-item--completed .task-item__text {
        //   color: #6F6F6F;
        // }
        // .task-item__delete-button {
        //   background-color: transparent;
        // }
        ```
    *   **Le Sélecteur Parent `&` :**
        *   `&` fait référence au sélecteur parent immédiat.
        *   Très utile pour les pseudo-classes (`&:hover`), les pseudo-éléments (`&::before`), ou pour créer des noms de classes basés sur le parent (style BEM : `&__element`, `&--modifier`).
    *   **Attention à la Sur-Imbrication :** Évitez d'imbriquer trop profondément (plus de 3-4 niveaux). Cela peut rendre les sélecteurs CSS compilés trop spécifiques et difficiles à surcharger, et nuire à la performance.

5.  **Partials et Imports (`_` et `@use` / `@import`)**
    *   **Partials (`_filename.scss`) :**
        *   Fichiers SCSS qui ne sont pas destinés à être compilés en fichiers CSS autonomes.
        *   Leur nom commence par un underscore (ex: `_variables-core.scss`, `_mixins-core.scss`).
        *   L'underscore indique à Sass de ne pas générer un fichier `_variables-core.css`.
        *   Ils sont faits pour être importés dans d'autres fichiers SCSS.
    *   **`@use` (Préféré et Moderne) :**
        *   La manière moderne et recommandée d'importer des partials. Elle charge les styles, variables, mixins, et fonctions d'un autre fichier SCSS et les rend disponibles sous un *namespace* (par défaut, le nom du fichier sans l'extension et sans l'underscore).
        *   **Syntaxe :** `@use '<chemin/vers/le/fichier>' as <namespace-alias>;` ou simplement `@use '<chemin/vers/le/fichier>';`
        *   L'underscore et l'extension `.scss` sont optionnels dans le chemin.
        *   **Exemple (de votre `_mixins-core.scss`) :**
            ```scss
            @use 'variables-core' as v; // variables-core est un alias pour _variables-core.scss

            // Utilisation des variables via le namespace 'v'
            @mixin focus-ring($color: v.$color-accent-primary) { /* ... */ }
            ```
        *   **Avantages de `@use` :**
            *   **Encapsulation :** Évite les conflits de noms de variables/mixins entre les fichiers car chaque module a son propre namespace.
            *   **Dépendances Claires :** On voit explicitement d'où vient une variable ou un mixin.
            *   **Performance :** Un fichier n'est compilé qu'une seule fois, même s'il est `@use`d plusieurs fois.
    *   **`@import` (Ancienne Méthode - À Éviter si Possible) :**
        *   L'ancienne manière d'importer. Elle inclut littéralement le contenu du fichier importé à l'endroit de l'import.
        *   Peut entraîner des problèmes de performance (compilation multiple du même code) et des conflits de noms de variables si mal géré.
        *   **Next.js et de nombreux outils modernes supportent toujours `@import` pour la compatibilité, mais `@use` est la voie à suivre pour les nouveaux projets.**
    *   **`includePaths` (dans `next.config.mjs`) :**
        *   Comme nous l'avons vu, cela permet de dire à Sass où chercher les fichiers lorsque vous faites un `@use 'nom-fichier';` sans chemin relatif. Très utile pour les fichiers d'abstractions partagés.
        *   Exemple de `next.config.mjs` :
            ```javascript
            sassOptions: {
              includePaths: [path.join(__dirname, 'src/app/presentation/common_scss_abstracts')],
            }
            ```
            Permet d'écrire `@use 'variables-core';` n'importe où pour importer `src/app/presentation/common_scss_abstracts/_variables-core.scss`.

**Partie 2 : Aller Plus Loin avec SCSS**

6.  **Mixins (`@mixin` et `@include`) : Blocs de Styles Réutilisables**
    *   **Principe :** Permettent de définir des groupes de déclarations CSS que vous pouvez réutiliser à plusieurs endroits. Similaire à une fonction en programmation.
    *   **Définition d'un Mixin (`@mixin`) :**
        ```scss
        // Dans votre _mixins-core.scss
        @mixin flex-center($direction: row, $justify: center, $align: center) {
          display: flex;
          flex-direction: $direction;
          justify-content: $justify;
          align-items: $align;
        }
        ```
        *   Les mixins peuvent accepter des arguments (avec des valeurs par défaut optionnelles, comme `$direction: row`).
    *   **Utilisation d'un Mixin (`@include`) :**
        ```scss
        // Dans votre _home-layout.scss
        .home-todo-container {
          @include mix.flex-center(column); // Utilise le mixin via son namespace 'mix'
          // ... autres styles
        }
        ```
    *   **Passage de Contenu à un Mixin (`@content`) :**
        Un mixin peut aussi accepter un bloc de contenu, ce qui est très puissant pour des choses comme les media queries.
        ```scss
        // Dans _mixins-core.scss
        @mixin respond-to($breakpoint-key) {
          // ... logique pour obtenir $breakpoint-value ...
          @if $breakpoint-value {
            @media (min-width: $breakpoint-value) {
              @content; // Le contenu passé à @include sera inséré ici
            }
          }
        }

        // Utilisation
        .todo-list-wrapper {
          padding: (v.$spacing-unit * 3);
          @include mix.respond-to(sm) { // On passe un bloc de contenu
            padding: (v.$spacing-unit * 4); // Ce style ne s'appliquera qu'à partir du breakpoint 'sm'
          }
        }
        ```

7.  **Héritage (`@extend`) : Partager des Ensembles de Propriétés CSS**
    *   **Principe :** Permet à un sélecteur d'hériter des styles d'un autre sélecteur.
    *   **Syntaxe :** `.classe-enfant { @extend .classe-parente; }`
    *   **Exemple :**
        ```scss
        .message {
          border: 1px solid #ccc;
          padding: 10px;
          color: #333;
        }

        .success-message {
          @extend .message; // Hérite de tous les styles de .message
          border-color: green;
        }

        .error-message {
          @extend .message;
          border-color: red;
        }

        // CSS Compilé :
        // .message, .success-message, .error-message {
        //   border: 1px solid #ccc;
        //   padding: 10px;
        //   color: #333;
        // }
        // .success-message {
        //   border-color: green;
        // }
        // .error-message {
        //   border-color: red;
        // }
        ```
    *   **Quand utiliser `@extend` vs `@mixin` ?**
        *   Utilisez `@extend` lorsque vos classes ont une relation sémantique "est un type de" (ex: `.error-message` *est un type de* `.message`). Cela regroupe les sélecteurs dans le CSS compilé.
        *   Utilisez `@mixin` lorsque vous voulez simplement réutiliser un bloc de styles sans créer de relation sémantique forte, ou lorsque vous avez besoin de passer des arguments. Les mixins dupliquent les styles à chaque `@include`.
    *   **Attention avec `@extend` :**
        *   Peut parfois créer des sélecteurs CSS compilés inattendus ou trop complexes si utilisé à outrance ou avec des sélecteurs complexes.
        *   Ne pas étendre des sélecteurs trop génériques ou des sélecteurs descendants complexes.
        *   Les "sélecteurs placeholders" (`%placeholder-name`) sont souvent une meilleure option pour l'héritage car ils ne sont pas sortis dans le CSS s'ils ne sont pas étendus.
            ```scss
            %base-button-style {
              padding: 10px 15px;
              border-radius: 5px;
            }

            .primary-button {
              @extend %base-button-style;
              background-color: blue;
            }
            // %base-button-style n'apparaîtra pas seul dans le CSS.
            ```

8.  **Fonctions SCSS (`@function`)**
    *   **Principe :** Similaires aux mixins, mais elles **retournent une valeur** au lieu d'un bloc de styles. Utiles pour des calculs complexes ou des manipulations de valeurs.
    *   **Syntaxe :**
        ```scss
        @use 'sass:math'; // Pour les fonctions mathématiques comme math.div

        @function px-to-rem($pixels, $base-font-size: 16) {
          @if unitless($pixels) {
             @warn "La valeur en pixels '#{$pixels}' a été fournie sans unité. En supposant 'px'.";
          } @else if unit($pixels) != "px" {
             @warn "La valeur '#{$pixels}' n'est pas en pixels.";
             @return $pixels; // Retourne la valeur originale si ce n'est pas des px
          }
          // Conversion en nombre sans unité pour la division
          $pixels-numeric: math.div($pixels, 1px);
          @return math.div($pixels-numeric, $base-font-size) * 1rem;
        }

        // Utilisation
        .element {
          font-size: px-to-rem(24px); // Résultat: 1.5rem (si base-font-size est 16)
          padding: px-to-rem(10);     // Fonctionnera aussi, avec un warning
        }
        ```
    *   Sass a de nombreux modules intégrés avec des fonctions utiles (ex: `sass:math`, `sass:color`, `sass:string`, `sass:list`, `sass:map`). Vous les utilisez avec `@use 'sass:module';`.

9.  **Opérations et Interpolation**
    *   **Opérations Mathématiques :** SCSS supporte `+`, `-`, `*`, `/`, `%` sur les nombres (avec gestion des unités).
        ```scss
        .element {
          width: 100% - 20px; // Fonctionne
          padding: (10px + 5px) * 2; // Utiliser des parenthèses pour la priorité
          line-height: math.div(24px, 16px); // Préférer math.div pour la division pour éviter l'ambiguïté avec la syntaxe CSS pour les polices
        }
        ```
    *   **Interpolation (`#{}`):** Permet d'insérer la valeur d'une variable (ou le résultat d'une expression Sass) dans des sélecteurs, des noms de propriétés, ou des chaînes de caractères.
        ```scss
        $name: "icon";
        $attr: "color";

        .#{name}-primary { // Crée la classe .icon-primary
          #{$attr}: blue; // Crée la propriété color: blue;
        }

        $image-path: "/images/";
        .logo {
          background-image: url("#{$image-path}logo.png");
        }
        ```

10. **Structures de Contrôle (`@if`, `@for`, `@each`, `@while`)**
    *   Permettent d'ajouter de la logique à vos feuilles de style. À utiliser avec discernement pour ne pas rendre le SCSS trop complexe.
    *   **`@if / @else if / @else` :** Conditions.
        ```scss
        @mixin set-theme-color($theme) {
          @if $theme == dark {
            background-color: black;
            color: white;
          } @else if $theme == light {
            background-color: white;
            color: black;
          } @else {
            background-color: grey;
            color: darkgrey;
          }
        }
        .element { @include set-theme-color(dark); }
        ```
    *   **`@for` :** Boucles pour un nombre défini d'itérations.
        ```scss
        // Générer des classes d'espacement
        @for $i from 1 through 4 { // 'through' inclut la dernière valeur, 'to' l'exclut
          .m-#{$i} {
            margin: #{$i * 0.5}rem;
          }
        }
        // CSS Compilé :
        // .m-1 { margin: 0.5rem; }
        // .m-2 { margin: 1rem; }
        // .m-3 { margin: 1.5rem; }
        // .m-4 { margin: 2rem; }
        ```
    *   **`@each` :** Itérer sur les éléments d'une liste ou les paires d'une map.
        ```scss
        $colors: (primary: blue, secondary: green, danger: red);

        @each $name, $color-value in $colors {
          .button-#{$name} {
            background-color: $color-value;
          }
        }
        // CSS Compilé :
        // .button-primary { background-color: blue; }
        // .button-secondary { background-color: green; }
        // .button-danger { background-color: red; }

        $icons: "home", "settings", "user";
        @each $icon in $icons {
          .icon-#{$icon} {
            background-image: url("/icons/#{$icon}.svg");
          }
        }
        ```
    *   **`@while` :** Boucle tant qu'une condition est vraie (moins courant).

**Partie 3 : Organisation et Bonnes Pratiques**

1.  **Structure de Projet SCSS (Exemple : 7-1 Pattern ou similaire)**
    *   Pour les gros projets, il est bon d'organiser vos fichiers SCSS dans une structure de dossiers logique. Le "7-1 Pattern" est populaire :
        *   `abstracts/` (ou `utils/`): Variables, fonctions, mixins, placeholders (ex: `_variables.scss`, `_mixins.scss`). Ce que vous avez fait avec `common_scss_abstracts`.
        *   `base/`: Styles de base pour les éléments HTML (reset, typographie, etc.).
        *   `components/`: Styles pour les petits composants réutilisables (boutons, cartes, inputs).
        *   `layout/`: Styles pour les grandes sections de la page (header, footer, grille, formulaires).
        *   `pages/` (ou `views/`): Styles spécifiques à des pages entières.
        *   `themes/`: Styles pour différents thèmes (si applicable).
        *   `vendors/`: Styles de bibliothèques externes (si vous ne les gérez pas via npm/yarn).
        *   `main.scss` (ou un fichier par "vue" comme dans votre cas `home.scss`): Le fichier principal qui importe tous les autres.
    *   Votre structure actuelle est déjà bien orientée vers cela, avec `common_scss_abstracts` et les `core_styles` par vue qui contiennent `abstracts`, `layout`, `components`.

2.  **Conventions de Nommage (ex: BEM)**
    *   Utiliser une convention de nommage cohérente pour vos classes CSS/SCSS aide énormément à la maintenabilité.
    *   **BEM (Block, Element, Modifier)** est très populaire :
        *   `block`: Un composant autonome (`.task-item`).
        *   `block__element`: Une partie d'un bloc qui n'a pas de sens en dehors de celui-ci (`.task-item__text`, `.task-item__delete-button`).
        *   `block--modifier`: Une variante ou un état d'un bloc (`.task-item--completed`).
    *   L'imbrication SCSS avec `&__element` et `&--modifier` facilite l'écriture de styles BEM.

3.  **Commentaires**
    *   SCSS supporte les commentaires CSS standard `/* ... */` (qui apparaissent dans le CSS compilé).
    *   Et les commentaires sur une seule ligne `// ...` (qui **n'apparaissent PAS** dans le CSS compilé, utiles pour les notes internes au SCSS). Votre convention de commentaires est un bon exemple d'utilisation de `//`.

4.  **Garder le CSS Compilé à l'Esprit**
    *   Bien que SCSS offre beaucoup de puissance, rappelez-vous toujours que cela compile en CSS standard.
    *   Évitez la sur-imbrication ou l'utilisation excessive de `@extend` qui pourraient générer un CSS inefficace ou trop spécifique.
    *   Utilisez les outils de développement de votre navigateur pour inspecter le CSS compilé et comprendre comment vos styles SCSS sont traduits.

**Ressources pour Approfondir :**

*   **Documentation Officielle de Sass :** [https://sass-lang.com/documentation](https://sass-lang.com/documentation) (la source de vérité !)
*   **Tutoriels en ligne :** De nombreux sites comme CSS-Tricks, Smashing Magazine, freeCodeCamp, etc., ont d'excellents articles et tutoriels sur SCSS.

---

J'espère que cette documentation vous donne une bonne base pour comprendre et utiliser SCSS plus efficacement ! C'est beaucoup d'informations, donc prenez le temps de digérer chaque partie.

**Prêt pour l'étape suivante ?**
Quand vous vous sentez prêt, nous pouvons passer à l'implémentation d'une nouvelle page (par exemple, une page "À Propos" ou une page de "Détail de Tâche" si nous voulions étendre la Todo List) pour mettre ces concepts en pratique. Cela nous permettra de voir comment organiser les styles pour une nouvelle vue tout en réutilisant vos abstractions communes.

Quelle type de page aimeriez-vous implémenter pour pratiquer ? Ou y a-t-il un aspect spécifique de SCSS que vous aimeriez explorer davantage en premier ?